/*
 * This is a manifest file that'll be compiled into application.css, which will include all the files
 * listed below.
 *
 * Any CSS (and SCSS, if configured) file within this directory, lib/assets/stylesheets, or any plugin's
 * vendor/assets/stylesheets directory can be referenced here using a relative path.
 *
 * You're free to add application-wide styles to this file and they'll appear at the bottom of the
 * compiled file so the styles you add here take precedence over styles defined in any other CSS
 * files in this directory. Styles in this file should be added after the last require_* statement.
 * It is generally better to create a new file per style scope.
 *
 *= require_tree .
 *= require_self
 */
table#events th.hilite {
    background-color: #fce883;
}

button {
    transition-duration: 0.4s;
    border-radius: 4px;
    background-color: white;
    color: black;
    border: 2px solid #ffc107;
    display: flex;
    justify-content: center;
}

.button:hover {
    background-color: #ffc107;
    color: white;
}

.form-check-input {
    color: #ffc107;
}

#checkbox {
    accent-color: #ffc107;
}

@keyframes growProgressBar {
    0%, 33% { --pgPercentage: 0; }
    100% { --pgPercentage: var(--value); }
}

@property --pgPercentage {
    syntax: '<number>';
    inherits: false;
    initial-value: 0;
}

div[role="progressbar"] {
    --size: 4rem;
    --fg: #ffc107;
    --bg: #fce883;
    --pgPercentage: var(--value);
    animation: growProgressBar 3s 1 forwards;
    width: var(--size);
    height: var(--size);
    border-radius: 50%;
    display: grid;
    place-items: center;
    background:
            radial-gradient(closest-side, white 80%, transparent 0 99.9%, white 0),
            conic-gradient(var(--fg) calc(var(--pgPercentage) * 1%), var(--bg) 0)
;
    font-family: Helvetica, Arial, sans-serif;
    font-size: calc(var(--size) / 5);
    color: var(--fg);
}

div[role="progressbar"]::before {
    counter-reset: percentage var(--value);
    content: counter(percentage) '%';
}

input[type=text] {
    padding: 5px 6px;
    border-radius: 10px;
    border: 0.01px solid #ffc107;
    background-color: white;
    color: #ffc107;
    box-shadow:0 0 10px 2px rgba(0,0,0,0.06);
}

.map-container h2 {
    margin-left: 68px;
    text-decoration: underline;
}

/*.event-results {*/
/*    width: 30%;*/
/*    max-height: 420px;*/
/*    overflow: auto;*/
/*    float: left;*/
/*    border: 2px solid black;*/
/*    margin: 0px 15px 0px 70px;*/
/*}*/

/*.event-results::-webkit-scrollbar-track {*/
/*    border: 1px solid #000;*/
/*    padding: 2px 0;*/
/*    background-color: #707070;*/
/*}*/

/*.event-results::-webkit-scrollbar {*/
/*    width: 15px;*/
/*}*/

/*.event-results::-webkit-scrollbar-thumb {*/
/*    box-shadow: inset 0 0 6px rgba(0,0,0,.3);*/
/*    background-color: #4934bd;*/
/*    border: 1px solid #000;*/
/*}*/

/*.event-results::-webkit-scrollbar-button:single-button {*/
/*    background-color: #bbbbbb;*/
/*    display: block;*/
/*    border-style: solid;*/
/*    height: 13px;*/
/*    width: 16px;*/
/*}*/

/*.event-results::-webkit-scrollbar-button:single-button:vertical:decrement {*/
/*    border-width: 0 8px 8px 8px;*/
/*    border-color: transparent transparent black transparent;*/
/*}*/

/*.event-results::-webkit-scrollbar-button:single-button:vertical:decrement:hover {*/
/*    border-color: transparent transparent #777777 transparent;*/
/*}*/

/*.event-results::-webkit-scrollbar-button:single-button:vertical:increment {*/
/*    border-width: 8px 8px 0px 8px;*/
/*    border-color: black transparent transparent transparent;*/
/*}*/

/*.event-results::-webkit-scrollbar-button:single-button:vertical:increment:hover {*/
/*    border-color: #777777 transparent transparent transparent*/
/*}*/

#map {
    width: 600px;
    height: 420px;
    float: right;
    margin-right: 75px;
    border: 1.5px solid black;
}